// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//Criando o modelo para o usuario
model User {
  id        String @id @default(cuid())
  clerkId   String @unique
  email     String @unique
  firstName String?
  lastName  String?
  phone     String?
  createdAt DateTime @default(now()) // member since sep 2025
  updatedAt DateTime @updatedAt

  // relationships
  appointments Appointment[]

  @@map("users")
}

// Criando modelo para o doutor

model Doctor {
  id          String @id @default(cuid())
  name        String
  email       String @unique
  phone       String
  speciality  String
  bio         String?
  imageUrl    String
  gender      Gender
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt    DateTime @updatedAt

// Relacoes
  appointment Appointment[]

  @@map("doctors")
}

// Criando o modelo  para a consulta

model Appointment {
  id          String    @id @default(cuid())
  date        DateTime
  time        String // store time as string i.e. 14:30
  duration    Int        @default(30) // duration in minutes
  status      AppointmentStatus @default(CONFIRMED)
  notes       String?
  reason      String? // reason for appointment - teeth cleaning? emergency visit? etc.
  createdAt   DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Chaves Estrangeiras

userId String
doctorId String

// Relacoes

user   User   @relation(fields: [userId],   references:[id], onDelete: Cascade)
doctor Doctor @relation(fields: [doctorId], references:[id], onDelete: Cascade)

@@map("appointments")
}



enum Gender {
  MALE
  FEMALE
}

enum AppointmentStatus {
  CONFIRMED
  COMPLETED 
}